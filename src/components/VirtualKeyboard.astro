---
interface Props {
	gameState: {
		revealedLetters: string[];
		incorrectGuesses: string[];
	};
}

const { gameState } = Astro.props;

function renderKeyboardHTML(gameState: Props['gameState']) {
	const rows = [
		["Q", "W", "E", "R", "T", "Y", "U", "I", "O", "P"],
		["A", "S", "D", "F", "G", "H", "J", "K", "L"],
		["Z", "X", "C", "V", "B", "N", "M"],
	];

	let keyboardHTML = "";

	for (const row of rows) {
		keyboardHTML += '<div class="flex justify-center gap-1 mb-1">';

		for (const letter of row) {
			let keyClass = "key bg-gray-700 border-2 border-gray-600 rounded px-3 py-2 text-base font-bold text-white cursor-pointer transition-all duration-200 min-w-[40px] flex justify-center items-center hover:bg-gray-600 hover:scale-105 md:px-2 md:py-1 md:text-sm";
			
			if (gameState.revealedLetters.includes(letter)) {
				keyClass += " !bg-green-500 !border-green-400";
			} else if (gameState.incorrectGuesses.includes(letter)) {
				keyClass += " !bg-gray-500 !border-gray-400 !text-gray-300";
			}

			keyboardHTML += `<button class="${keyClass}" data-letter="${letter}">${letter}</button>`;
		}

		keyboardHTML += "</div>";
	}

	return keyboardHTML;
}
---

<div id="keyboard-container" class="flex flex-col gap-2">
	<Fragment set:html={renderKeyboardHTML(gameState)} />
</div>
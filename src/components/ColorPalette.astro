---
interface Props {
	puzzle: {
		colorMap: Record<string, string>;
	};
	gameState: {
		revealedLetters: string[];
	};
}

const { puzzle, gameState } = Astro.props;

function renderPaletteHTML(
	puzzle: Props["puzzle"],
	gameState: Props["gameState"],
) {
	const colors = Object.entries(puzzle.colorMap);
	const totalColors = colors.length;

	// Always split into exactly 2 rows
	const itemsPerRow = Math.ceil(totalColors / 2);

	let paletteHTML = '<div class="space-y-2">';

	// Create exactly 2 rows
	for (let rowIndex = 0; rowIndex < 2; rowIndex++) {
		const startIndex = rowIndex * itemsPerRow;
		const endIndex = Math.min(startIndex + itemsPerRow, totalColors);
		const row = colors.slice(startIndex, endIndex);
		
		if (row.length > 0) {
			paletteHTML += '<div class="flex gap-2 justify-center items-center">';

			for (const [letter, color] of row) {
				const displayLetter = gameState.revealedLetters.includes(letter)
					? letter
					: "?";
				paletteHTML += `
					<div class="flex items-center gap-1 text-sm">
						<div class="w-4 h-4 rounded-full border border-gray-500" style="background-color: ${color};"></div>
						= <span class="font-bold text-xs min-w-[12px]">${displayLetter}</span>
					</div>
				`;
			}
			paletteHTML += "</div>";
		}
	}

	paletteHTML += "</div>";
	return paletteHTML;
}
---

<div id="palette-container">
	<Fragment set:html={renderPaletteHTML(puzzle, gameState)} />
</div>

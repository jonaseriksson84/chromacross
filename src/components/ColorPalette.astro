---
interface Props {
	puzzle: {
		colorMap: Record<string, string>;
	};
	gameState: {
		revealedLetters: string[];
	};
}

const { puzzle, gameState } = Astro.props;

function renderPaletteHTML(puzzle: Props['puzzle'], gameState: Props['gameState']) {
	let paletteHTML = '<div class="mb-4 font-bold">Color Palette</div>';
	paletteHTML += '<div class="flex flex-wrap gap-2 justify-center">';

	for (const [letter, color] of Object.entries(puzzle.colorMap)) {
		const displayLetter = gameState.revealedLetters.includes(letter)
			? letter
			: "?";
		paletteHTML += `
			<div class="flex items-center gap-1 text-sm">
				<div class="w-5 h-5 rounded-full border border-gray-500" style="background-color: ${color};"></div>
				= <span class="font-bold min-w-[15px]">${displayLetter}</span>
			</div>
		`;
	}

	paletteHTML += "</div>";
	return paletteHTML;
}
---

<div id="palette-container" class="bg-gray-800 rounded-lg p-6 min-h-[100px] border-2 border-gray-700 flex justify-center items-center flex-wrap gap-2">
	<Fragment set:html={renderPaletteHTML(puzzle, gameState)} />
</div>
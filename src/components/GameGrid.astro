---
interface Props {
	puzzle: {
		words: { horizontal: string; vertical: string };
		intersection: {
			letter: string;
			horizontalIndex: number;
			verticalIndex: number;
		};
		colorMap: Record<string, string>;
	};
	gameState: {
		revealedLetters: string[];
		status: string;
	};
}

const { puzzle, gameState } = Astro.props;

function renderGridHTML(
	puzzle: Props["puzzle"],
	gameState: Props["gameState"],
) {
	const horizontal = puzzle.words.horizontal;
	const vertical = puzzle.words.vertical;
	const intersection = puzzle.intersection;

	const gridWidth = horizontal.length;
	const gridHeight = vertical.length;

	let gridHTML = `<div class="puzzle-grid" style="display: grid; grid-template-columns: repeat(${gridWidth}, 1fr); gap: 2px;">`;

	for (let row = 0; row < gridHeight; row++) {
		for (let col = 0; col < gridWidth; col++) {
			let letter = null;
			let isEmpty = true;

			// Check if this is part of the horizontal word
			if (row === intersection.verticalIndex) {
				letter = horizontal[col];
				isEmpty = false;
			}
			// Check if this is part of the vertical word (excluding intersection)
			else if (col === intersection.horizontalIndex) {
				letter = vertical[row];
				isEmpty = false;
			}

			if (!isEmpty && letter) {
				const color = puzzle.colorMap[letter];
				const showLetter = gameState.revealedLetters.includes(letter);
				gridHTML += `<div class="grid-cell" style="background-color: ${color}; width: 40px; height: 40px; display: flex; justify-content: center; align-items: center; border: 2px solid #4a4a4a; font-size: 1.2rem; font-weight: bold; color: #ffffff;">${showLetter ? letter : "&nbsp;"}</div>`;
			} else {
				gridHTML +=
					'<div class="grid-cell" style="background-color: transparent; border: none; width: 40px; height: 40px;"></div>';
			}
		}
	}

	gridHTML += "</div>";
	return gridHTML;
}
---

<div id="grid-container">
	<Fragment set:html={renderGridHTML(puzzle, gameState)} />
</div>

<style>
	#grid-container {
		background-color: #2a2a2a;
		border-radius: 8px;
		padding: 1.5rem;
		min-height: 200px;
		display: flex;
		justify-content: center;
		align-items: center;
		border: 2px solid #3a3a3a;
	}

	:global(.grid-cell) {
		width: 40px;
		height: 40px;
		border: 2px solid #4a4a4a;
		display: flex;
		justify-content: center;
		align-items: center;
		font-size: 1.2rem;
		font-weight: bold;
		background-color: #3a3a3a;
	}

	@media (max-width: 600px) {
		:global(.grid-cell) {
			width: 35px;
			height: 35px;
			font-size: 1rem;
		}
	}
</style>

---
interface Props {
	puzzle: {
		words: { horizontal: string; vertical: string };
		intersection: {
			letter: string;
			horizontalIndex: number;
			verticalIndex: number;
		};
		colorMap: Record<string, string>;
	};
	gameState: {
		revealedLetters: string[];
		status: string;
	};
}

const { puzzle, gameState } = Astro.props;

function renderGridHTML(
	puzzle: Props["puzzle"],
	gameState: Props["gameState"],
) {
	const horizontal = puzzle.words.horizontal;
	const vertical = puzzle.words.vertical;
	const intersection = puzzle.intersection;

	const gridWidth = horizontal.length;
	const gridHeight = vertical.length;

	let gridHTML = `<div class="grid gap-0.5" style="grid-template-columns: repeat(${gridWidth}, 1fr);">`;

	for (let row = 0; row < gridHeight; row++) {
		for (let col = 0; col < gridWidth; col++) {
			let letter = null;
			let isEmpty = true;

			// Check if this is part of the horizontal word
			if (row === intersection.verticalIndex) {
				letter = horizontal[col];
				isEmpty = false;
			}
			// Check if this is part of the vertical word (excluding intersection)
			else if (col === intersection.horizontalIndex) {
				letter = vertical[row];
				isEmpty = false;
			}

			if (!isEmpty && letter) {
				const color = puzzle.colorMap[letter];
				const showLetter = gameState.revealedLetters.includes(letter);
				gridHTML += `<div class="w-10 h-10 flex items-center justify-center border-2 border-gray-600 text-xl font-bold text-white md:w-9 md:h-9 md:text-base" style="background-color: ${color};">${showLetter ? letter : "&nbsp;"}</div>`;
			} else {
				gridHTML += '<div class="w-10 h-10 md:w-9 md:h-9"></div>';
			}
		}
	}

	gridHTML += "</div>";
	return gridHTML;
}
---

<div id="grid-container" class="bg-gray-800 rounded-lg p-6 min-h-[200px] flex justify-center items-center border-2 border-gray-700">
	<Fragment set:html={renderGridHTML(puzzle, gameState)} />
</div>

---
import GameGrid from '../components/GameGrid.astro';
import ColorPalette from '../components/ColorPalette.astro';
import VirtualKeyboard from '../components/VirtualKeyboard.astro';
import GameModals from '../components/GameModals.astro';
import '../styles/global.css';

// A hardcoded puzzle for development
const puzzle = {
	puzzleId: 1,
	words: { horizontal: "WATER", vertical: "LEMON" },
	intersection: { letter: "E", horizontalIndex: 3, verticalIndex: 1 },
	uniqueLetters: ["W", "A", "T", "E", "R", "L", "M", "O", "N"],
	colorMap: {
		W: "#4a90e2",
		A: "#7ed321",
		T: "#f5a623",
		E: "#bd10e0",
		R: "#d0021b",
		L: "#f8e71c",
		M: "#50e3c2",
		O: "#9013fe",
		N: "#b8e986",
	},
};

// The player's current state
const gameState = {
	puzzleId: 1,
	revealedLetters: [],
	incorrectGuesses: [],
	status: "IN_PROGRESS",
};
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>ChromaCross</title>
	</head>
	<body class="bg-gray-900 text-white min-h-screen flex justify-center items-center p-5">
		<div id="game-container" class="max-w-lg w-full flex flex-col gap-8 text-center">
			<header>
				<h1 class="text-4xl font-bold mb-4 bg-gradient-to-r from-red-400 via-accent-blue via-blue-400 to-green-400 bg-clip-text text-transparent md:text-3xl">ChromaCross</h1>
			</header>

			<div id="game-info" class="text-center mb-4 text-lg">
				<div id="guess-counter" class="bg-gray-800 border-2 border-gray-700 rounded-lg px-4 py-3 inline-block">
					Remaining guesses: <span id="remaining-count" class="font-bold text-blue-400">6</span>
				</div>
			</div>

			<GameGrid puzzle={puzzle} gameState={gameState} />
			<ColorPalette puzzle={puzzle} gameState={gameState} />
			<VirtualKeyboard gameState={gameState} />
			<GameModals />
		</div>

		<script>
			import { 
				handleGuess, 
				saveState, 
				loadState, 
				render, 
				shakeElement 
			} from '../utils/gameLogic.js';
			import { addShareEventListeners } from '../utils/shareUtils.js';

			// Pass server-side data to client-side
			const puzzle = {
				puzzleId: 1,
				words: { horizontal: "WATER", vertical: "LEMON" },
				intersection: { letter: "E", horizontalIndex: 3, verticalIndex: 1 },
				uniqueLetters: ["W", "A", "T", "E", "R", "L", "M", "O", "N"],
				colorMap: {
					W: "#4a90e2",
					A: "#7ed321",
					T: "#f5a623",
					E: "#bd10e0",
					R: "#d0021b",
					L: "#f8e71c",
					M: "#50e3c2",
					O: "#9013fe",
					N: "#b8e986",
				},
			};

			// The player's current state (will be reactive)
			let gameState = {
				puzzleId: 1,
				revealedLetters: [],
				incorrectGuesses: [],
				status: "IN_PROGRESS",
			};

			// Add event listeners when DOM is loaded
			document.addEventListener("DOMContentLoaded", function () {
				// Load saved state before initializing
				const savedState = loadState(puzzle.puzzleId);
				if (savedState) {
					gameState = savedState;
					console.log("Game state loaded:", gameState);
				}

				addEventListeners();
				addShareEventListeners(puzzle, gameState);
				// Initial render to replace server-side content with client-side interactive version
				render(puzzle, gameState);
			});

			function addEventListeners(): void {
				// Event delegation for keyboard clicks
				const keyboardContainer = document.getElementById("keyboard-container");
				if (keyboardContainer) {
					keyboardContainer.addEventListener("click", function (event: Event) {
						const target = event.target as HTMLElement;
						if (target.classList.contains("key")) {
							const letter = (target as HTMLButtonElement).dataset.letter;
							if (letter) {
								handleGuessWrapper(letter);
							}
						}
					});
				}

				// Optional: Add physical keyboard support
				document.addEventListener("keydown", function (event: KeyboardEvent) {
					const letter = event.key.toUpperCase();
					if (letter.match(/[A-Z]/)) {
						handleGuessWrapper(letter);
					}
				});
			}

			function handleGuessWrapper(letter: string): void {
				const result = handleGuess(letter, puzzle, gameState);
				
				if (result.shouldShake) {
					// Provide feedback (brief shake or highlight)
					shakeElement(document.querySelector(`[data-letter="${letter}"]`));
					return;
				}

				// Update game state
				gameState = result.gameState;

				// Save state after every valid move
				saveState(gameState);

				// Re-render the UI
				render(puzzle, gameState);

				// Update share event listeners with new game state
				addShareEventListeners(puzzle, gameState);
			}
		</script>
	</body>
</html>